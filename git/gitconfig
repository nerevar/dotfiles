[user]
    name = Roman Rybalchenko (nerevar)
    email = nerevar@yandex-team.ru
[merge]
    log = true
    ff = false
    conflictstyle = diff3
[rebase]
    autosquash = true
[branch]
    autosetuprebase = always
[branch "master"]
    rebase = true
[branch "develop"]
    rebase = true
[branch "dev"]
    rebase = true
[branch "release"]
    rebase = true
[push]
    default = current
[color]
    ui = true
    branch = auto
    diff = auto
    interactive = auto
    status = auto
[color "diff"]
    meta = normal bold
    frag = magenta bold
    old = red bold
    new = blue bold
[core]
    pager = "less -r"
    # Use custom `.gitignore` and `.gitattributes`
    excludesfile = ~/.gitignore
    quotepath = false
[diff]
    noprefix = true
    algorithm = patience
[url "git@github.yandex-team.ru:"]
    pushInsteadOf = "ght:"
    pushInsteadOf = "git://github.yandex-team.ru/"
[url "git://github.yandex-team.ru/"]
    insteadOf = "ght:"
[url "git@github.com:"]
    pushInsteadOf = "gh:"
    pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
    insteadOf = "gh:"

[alias]
    ci = commit
    co = checkout
    st = status -sb
    br = branch
    cp = cherry-pick
    rb = rebase
    di = diff
    dc = diff --cached
    ds = diff --staged

    m = checkout master
    d = checkout dev
    r = checkout release

    am = commit --amend
    amend = commit --amend -C HEAD
    undo = reset --soft HEAD^

    url = config --get remote.origin.url

    # search commits by message
    search = "!f() { git log --all --grep=$1; }; f"

    # show files ignored by git
    ignored = ls-files -o -i --exclude-standard

    praise = blame

    # show tags and any tag annotation (tito adds tag annotations for example)
    tags = tag -n1 -l

    # git changed file <file> — show commits in current branch where file was changed
    cf = log dev...HEAD --pretty=oneline --abbrev-commit --stat=80 --reverse --follow --
    cfm = log master...HEAD --pretty=oneline --abbrev-commit --stat=80 --reverse --follow --

    # git changed commit <commit>
    cc = "!f() { git log dev...HEAD --pretty=oneline --abbrev-commit --stat=80 --reverse --follow -- `git diff-tree --no-commit-id --name-only -r $1`; }; f"

    # git melt <fix> <primary> — fixups fix commit to primary
    melt = "!f() { GIT_SEQUENCE_EDITOR=\"git-melt-sort $1 $2\" git rebase -i dev; }; f"

    # show commits and changed files in current branch
    commits = log dev...HEAD --pretty=oneline --abbrev-commit --stat --reverse
    # show changed files in current branch
    files = diff dev...HEAD --stat

    standup = "!sh -c \"git log --since '1 day ago' --oneline --author $USER\""

    recent = "!r() { cur=$(git rev-parse --abbrev-ref HEAD); git for-each-ref --sort=-committerdate refs/heads/ --format='%(color:yellow)%(refname:short)|%(color:bold               green)%(committerdate:relative)|%(color:blue)%(subject)|%(color:magenta)%(authorname)%(color:reset)' | column -ts'|'; }; r"
    recent2 = "!r() { cur=$(git rev-parse --abbrev-ref HEAD); git for-each-ref --sort=-committerdate refs/heads/ --format='%(color:yellow)%(refname:short)|%(color:bold               green)%(committerdate:relative)|%(color:blue)%(subject)%(color:reset)' | column -ts'|'; }; r"

    # Display the number of commits per author in numerical order
    who = shortlog -sn --

    merge-to = "!gitmergeto() { export current_branch=`git branch | grep '* ' | tr -d '* '` && git checkout $1 && git merge --no-ff $current_branch; unset current_branch; git branch;}; gitmergeto"

    # various pretty loggers from various places
    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
    lc = log ORIG_HEAD.. --stat --no-merges
    # from http://blog.kfish.org/2010/04/git-lola.html
    lol = log --graph --decorate --pretty=oneline --abbrev-commit
    lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
    ll = log --graph --date=short

    # file level ignoring http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
    assume   = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assumed  = "!git ls-files -v | grep ^h | cut -c 3-"

    snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"

    # Find Merge — найти мерж-коммит, с которым был влит коммит. Пример как `git fm 0c23f92`
    # Тред в рассылке: https://ml.yandex-team.ru/thread/2370000000877081412/
    fm = "!sh -c 'git show `git rev-list --ancestry-path $0..dev --merges | tail -f`'"

    # easy merge
    ours   = "!f() { git checkout --ours $@ && git add $@; }; f"
    theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

[filter "lfs"]
    # При git add превращать скриншоты в указатели
    clean = git-lfs clean %f
    # При git checkout превращать указатели в скриншоты
    smudge = git-lfs smudge --skip %f
    required = true
[lfs]
    # включается batch-режим, актуально для старых версий git-lfs
    batch = true
    concurrenttransfers = 15
