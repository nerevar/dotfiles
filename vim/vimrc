" ====================================
"         NeReVaR vim configs
" ====================================

set nocompatible

call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

filetype plugin indent on

" ====================================
"               Settings
" ====================================

set hidden " hide buffers when they are abandoned

set backspace=indent,eol,start  " Allow backspace to remove indents, newlines and old tex

set encoding=utf-8              " Default encoding"

set nobackup                    " No backups

set wildmenu                    " Use wildmenu ...

set number                      " Show line numbers

set title                       " Show file name in window title
set noruler                     " Hide ruler - show statusline instead
set showcmd                     " Show information about the current command going on

set scrolljump=5                " Scroll lines when scroll up or down
set scrolloff=3                 " Scroll lines before and after search text

" Search options
set incsearch                   " Turns on incremental search
set showmatch
set hlsearch
set ignorecase
set smartcase
" Clear the search highlight by pressing ENTER when in Normal mode (Typing commands)
nnoremap <CR> :nohlsearch<CR>/<BS><CR>

set gdefault

" Show tabs and spaces as dots
set list listchars=tab:>·,trail:·

" Symbol "-" - part of word
set iskeyword+=-

set nowrap
set autoindent
set smartindent
set expandtab
set shiftwidth=4
set tabstop=4
set softtabstop=4

" ====================================
"               Mapping
" ====================================

command W w
command WQ wq
command Wq wq
command Q q

vnoremap < <gv
vnoremap > >gv

" \p - toggle paste mode
set pastetoggle=<leader>p

" \l - toggle list - hightlight spaces and tabs
nmap <leader>l :set list! <CR>

" \w - toggle text wrapping
nmap <leader>w :set wrap! <CR>

" \n - toggle line numbers
nmap <leader>n :set number! <CR>

" \s - toggle syntax highlight
nmap <leader>s :if exists("g:syntax_on") <Bar>
    \   syntax off <Bar>
    \ else <Bar>
    \   syntax enable <Bar>
    \ endif <CR>

" Enable/disable mouse
function! ToggleMouse()
  if &mouse == 'a'
    set mouse=
    echo "Mouse usage disabled"
  else
    set mouse=a
    echo "Mouse usage enabled"
  endif
endfunction
nnoremap <leader>m :call ToggleMouse()<CR>

" ====================================
"               Misc
" ====================================

syntax enable

" Solarized
set background=dark
colorscheme solarized

set t_Co=16
if has("gui_running")
    set t_Co=256
    let g:solarized_termcolors=256
endif

" \b - toggle background color
call togglebg#map("<leader>b")

" Status line
set laststatus=2                                        " Always show statusline

set statusline=
set statusline+=%1*\[%n]                                "buffernr
set statusline+=%2*\%<%F\                               "File+path
set statusline+=%3*\ %y\                                "FileType
set statusline+=\ %{FileSize()}\                        "FileSize
set statusline+=%4*\ %{''.(&fenc!=''?&fenc:&enc).''}    "Encoding
set statusline+=%{(&bomb?\",BOM\":\"\")}\               "Encoding2
set statusline+=\ %{&ff}\                               "FileFormat (dos/unix..)
set statusline+=%5*\%=\ %6*\row:%l/%L\ (%03p%%)\            "Rownumber/total (%)
set statusline+=col:%03c\                               "Colnr
set statusline+=\ %m%r%w\ %P\ \                         "Modified? Readonly? Top/bot.

" Status line colors:
" http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim
" http://images.wikia.com/vim/images/1/16/Xterm-color-table.png
hi User1 ctermbg=0 ctermfg=8
hi User2 ctermbg=0 ctermfg=4
hi User3 ctermbg=0 ctermfg=2
hi User4 ctermbg=0 ctermfg=8
hi User5 ctermbg=0 ctermfg=8
hi User6 ctermbg=0 ctermfg=8

" Find out current buffer's size and output it.
function! FileSize()
        let bytes = getfsize(expand('%:p'))
        if (bytes >= 1024)
                let kbytes = bytes / 1024
        endif
        if (exists('kbytes') && kbytes >= 1000)
                let mbytes = kbytes / 1000
        endif

        if bytes <= 0
                return 'null'
        endif

        if (exists('mbytes'))
                return mbytes . 'MB'
        elseif (exists('kbytes'))
                return kbytes . 'KB'
        else
                return bytes . 'B'
        endif
endfunction

" FuzzyFinder
nnoremap <silent> ffb :FufBuffer<CR>
nnoremap <silent> <c-b> :FufBuffer<CR>
nnoremap <silent> fff :FufFile<CR>
nnoremap <silent> ffd :FufDir<CR>
nnoremap <silent> ffj :FufJumpList<CR>

" NERDTree
" \f - find file in NerdTree
" \t - just open NerdTree
nmap <leader>f :NERDTreeFind<CR>
nmap <leader>t :NERDTreeToggle<CR>
let NERDTreeShowBookmarks=0
let NERDTreeChDirMode=0
let NERDTreeShowHidden=1
let NERDTreeKeepTreeInNewTab=1

" Open a NERDTree automatically when vim starts up if no files were specified
autocmd vimenter * if !argc() | NERDTree | endif

" Avoid syntax-highlighting for files, larger than 100KB
autocmd BufReadPre * if getfsize(expand("%")) > 100*1024 | syntax off | endif

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

" Folding
if has('folding')
  set foldmethod=indent
  set foldlevel=99
  " toggle folds with space
  nmap <space> za
endif

